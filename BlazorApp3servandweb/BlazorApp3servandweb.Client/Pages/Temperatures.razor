@page "/temperatures"
@rendermode InteractiveWebAssembly

@using ScottPlot
@using ScottPlot.AxisPanels
@using ScottPlot.Blazor

<h1>Temperature</h1>

<BlazorPlot @ref="blazorPlot" Style="width: 800px; height: 450px;" />

@code {
    BlazorPlot blazorPlot = new();

    // Datos Temperatura eje Y
    double[] ys = new double[] { 0, 40, 80, 120, 160 };
    // double[] ys = new double[] {  0, 5000, 10000, 15000, 20000 };


    ScottPlot.Plottables.DataLogger? loggerTemperature;

    private System.Threading.Timer? AddNewDataTimer;
    private System.Threading.Timer? UpdatePlotTimer;
   



    readonly ScottPlot.DataGenerators.RandomWalker walkerTemp = new(1, multiplier: 10);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var plt = blazorPlot.Plot;
            PlotTheme.ApplyDarkTheme(plt);

            // ===== EJE Y =====
            var yLeft = (LeftAxis)plt.Axes.Left;
            yLeft.LabelText = "Temperature [°C]";
            yLeft.LabelFontSize = 12;
            yLeft.MinimumSize = 50;
            yLeft.LabelFontColor = Colors.Blue;

            yLeft.TickGenerator = new ScottPlot.TickGenerators.NumericManual(
              positions: ys,
              labels:  ys.Select(v => v.ToString()).ToArray());


            // yLeft.Min = 38;
            // yLeft.Max = 152;

            // ===== EJE X =====
            var xAxis = (BottomAxis)plt.Axes.Bottom;
            xAxis.LabelText = "Time [minutes]";
            xAxis.FrameLineStyle.IsVisible = true;
            xAxis.FrameLineStyle.Color = Colors.Black;


            plt.Axes.Margins(left: 100, right: 20, top: 10, bottom: 40);



            // ===== LOGGER =====
            loggerTemperature = plt.Add.DataLogger();
            loggerTemperature.Axes.YAxis = yLeft;
            loggerTemperature.Color = Colors.DodgerBlue;

            blazorPlot.Refresh();

            // Lanzar tarea periódica
            // _ = UpdateLoop();

            // Datos iniciales
            int count = 3000;
            loggerTemperature.Add(walkerTemp.Next(count));
        


            blazorPlot.Refresh();
            AddNewDataTimer = new System.Threading.Timer(
                     e =>
                     {
                         InvokeAsync(() =>
                         {
                             OnTimerCallback();
                         });
                     },
                     null,
                     TimeSpan.Zero,
                     TimeSpan.FromSeconds(1)
                     );

            UpdatePlotTimer = new System.Threading.Timer(
                e =>
                {
                    InvokeAsync(() =>
                    {
                        OnTimerCallback2();
                    });
                },
                null,
                TimeSpan.Zero,
                TimeSpan.FromSeconds(1)
                );
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Task OnTimerCallback()
    {
        const int count = 5;
        loggerTemperature?.Add(walkerTemp.Next(count));
    
        return Task.CompletedTask;
    }

    private Task OnTimerCallback2()
    {
        blazorPlot.Refresh();
        return Task.CompletedTask;
    }
}
