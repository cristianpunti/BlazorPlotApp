@page "/flows"
@rendermode InteractiveWebAssembly

@using ScottPlot
@using ScottPlot.AxisPanels
@using System.Globalization
@using ScottPlot.Blazor

<h1>Flows</h1>

<BlazorPlot @ref="blazorPlot" Style="width: 600px; height: 400px;" />

@code {
    BlazorPlot blazorPlot = new();

   // double[] xsTicks = new double[] { 0, 500, 1000, 1500, 2000 };
   // double[] ysLeftTicks = new double[] { 0, 155.350, 310.700, 466.050, 621.400 };
   double[] ysLeftTicks = new double[] {  0, 10.000, 20.000, 30.000 };
   double[] ysRightTicks = new double[] { 0, 50, 100, 150, 200 };

    private System.Threading.Timer? AddNewDataTimer;
    private System.Threading.Timer? UpdatePlotTimer;

    ScottPlot.Plottables.DataLogger? loggerFlow;
    ScottPlot.Plottables.DataLogger? loggerMass;

    readonly ScottPlot.DataGenerators.RandomWalker walkerFlow = new(1, multiplier: 1.000);
    readonly ScottPlot.DataGenerators.RandomWalker walkerMass = new(1, multiplier: 10);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var plt = blazorPlot.Plot;
            // ===== EJE Y IZQUIERDO (Flujo) =====

            LeftAxis yLeftFlow = (LeftAxis)plt.Axes.Left;
            yLeftFlow.LabelText = "Volumetric Flow [m³/h]";
            yLeftFlow.LabelFontSize = 12;
            yLeftFlow.LabelFontColor = Colors.Green;
            yLeftFlow.MinimumSize = 80;

            // // Desactivar auto-ticks
            yLeftFlow.TickGenerator = new ScottPlot.TickGenerators.NumericManual(positions: ysLeftTicks,
           labels: ysLeftTicks.Select(v => v == 0 ? "0" : v.ToString("N3", CultureInfo.InvariantCulture).Replace(",", ".")).ToArray());
            // yLeftFlow.TickGenerator = new ScottPlot.TickGenerators.NumericAutomatic
            // {
            //     LabelFormatter = v => v == 0 ? "0" : v.ToString("N3", CultureInfo.InvariantCulture).Replace(",", ".") // enteros

            // };

       



            // // ===== EJE Y SECUNDARIO INDEPENDIENTE  =====
            LeftAxis yRightSpeed = plt.Axes.AddLeftAxis();
            yRightSpeed.LabelText = "Massflow [tn/h]";
            yRightSpeed.LabelFontSize = 12;
            yRightSpeed.LabelFontColor = Colors.Violet;
            yRightSpeed.MinimumSize = 50;

            // // Desactivar auto-ticks
            yRightSpeed.TickGenerator = new ScottPlot.TickGenerators.NumericManual(
               positions: ysRightTicks,
               labels: ysRightTicks.Select(v => v.ToString()).ToArray());
            yRightSpeed.FrameLineStyle.IsVisible = false;
            // yRightSpeed.Min = ysRightTicks.Min();
            // yRightSpeed.Max = ysRightTicks.Max();



            // // ===== EJE X =====
            BottomAxis xAxis = (BottomAxis)plt.Axes.Bottom;
            xAxis.LabelText = "Time [minutes]";
            // // xAxis.SetTicks(
            // //     xsTicks,
            // //     xsTicks.Select(v => v.ToString()).ToArray()
            // // );
            // // Desactivar auto-ticks
            // xAxis.TickGenerator = new ScottPlot.TickGenerators.NumericManual(
            //     xsTicks,
            //     xsTicks.Select(v => v.ToString()).ToArray());
            // xAxis.Min = xsTicks.Min();
            // xAxis.Max = xsTicks.Max();
            // xAxis.FrameLineStyle.IsVisible = true;
            // xAxis.FrameLineStyle.Color = Colors.Black;
            // plt.Axes.Right.IsVisible = true;

            // // Márgenes
            plt.Axes.Margins(left: 180, right: 80, top: 10, bottom: 40);

            // xAxis.Min = xsTicks.Min();
            // xAxis.Max = xsTicks.Max();

            // yLeftFlow.Min = 0;
            // yLeftFlow.Max = 621.400;

            // yRightSpeed.Min = 0;
            // yRightSpeed.Max = 200;


            // ===== LOGGERS =====
            loggerFlow = plt.Add.DataLogger();
            loggerFlow.Axes.YAxis = yLeftFlow;
            loggerFlow.Color = Colors.DodgerBlue;

            loggerMass = plt.Add.DataLogger();
            loggerMass.Axes.YAxis = yRightSpeed;
            loggerMass.Color = Colors.Orange;

            // Datos iniciales
            int count = 3000;
            loggerFlow.Add(walkerFlow.Next(count));
            loggerMass.Add(walkerMass.Next(count));


            blazorPlot.Refresh();
            AddNewDataTimer = new System.Threading.Timer(
                     e =>
                     {
                         InvokeAsync(() =>
                         {
                             OnTimerCallback();
                         });
                     },
                     null,
                     TimeSpan.Zero,
                     TimeSpan.FromSeconds(1)
                     );

            UpdatePlotTimer = new System.Threading.Timer(
                e =>
                {
                    InvokeAsync(() =>
                    {
                        OnTimerCallback2();
                    });
                },
                null,
                TimeSpan.Zero,
                TimeSpan.FromSeconds(1)
                );
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private  Task OnTimerCallback()
    {
        const int count = 5;
        loggerFlow?.Add(walkerFlow.Next(count));
        loggerMass?.Add(walkerMass.Next(count));
        return Task.CompletedTask;
    }

    private Task OnTimerCallback2()
    {
        blazorPlot.Refresh();
        return Task.CompletedTask;
    }
}
